const inputBox = document.getElementById("input-box");
const listContainer = document.getElementById("list-container");
let editingTask = null;

// Function to add a new task or edit an existing task
function addTask() {
  const taskText = inputBox.value.trim();
  if (taskText === "") {
    alert("You must write something!");
    return; // Exit the function if the input is empty
  }

  if (editingTask) {
    // If there's an editing task, update it
    editingTask.firstChild.textContent = taskText;
    saveData();

    // Toggle the button text between "Edit" and "Add"
    const editButton = document.querySelector("button[onclick='addTask()']");
    editButton.textContent = "Add";
    editButton.onclick = function () {
      addTask();
    };
    edittaskapi(editingTask.id, taskText); // Call the API to edit the task
    inputBox.value = "";

    editingTask = null;
  } else {
    // Create a new task item
    const li = createListItem(taskText);
    listContainer.appendChild(li);
    inputBox.value = "";
    saveData();
    createTaskOnAPI(taskText);
  }
}

// Function to edit a task
function editTask(task) {
  const taskText = task.firstChild.textContent.trim();
  inputBox.value = taskText;

  // Change the "Add" button to "Edit" with an event listener
  const addButton = document.querySelector("button[onclick='addTask()']");
  addButton.textContent = "Edit";
  addButton.onclick = function () {
    addTask();
  };

  editingTask = task;
}

// Function to create a new list item
function createListItem(taskText) {
  const li = document.createElement("li");
  li.textContent = taskText;

  const editButton = createButton("Edit", "edit");
  const deleteButton = createButton("Delete", "delete");

  editButton.addEventListener("click", () => editTask(li));
  deleteButton.addEventListener("click", () => deleteTask(li));

  const buttonsDiv = document.createElement("div");
  buttonsDiv.classList.add("buttons");
  buttonsDiv.appendChild(editButton);
  buttonsDiv.appendChild(deleteButton);

  li.appendChild(buttonsDiv);

  return li;
}

// Function to create a button
function createButton(text, className) {
  const button = document.createElement("button");
  button.textContent = text;
  button.className = className;
  return button;
}

// Function to handle the click event on list items (mark as done)
listContainer.addEventListener("click", function (e) {
  if (e.target.tagName === "LI") {
    e.target.classList.toggle("checked");
    saveData();
  }
}, true);

// Function to save the list data to local storage
function saveData() {
  localStorage.setItem("data", listContainer.innerHTML);
}

// Function to load the list data from local storage
function loadData() {
  listContainer.innerHTML = localStorage.getItem("data");
}
loadData();

// Function to clear local storage and empty the list
function clearLocalStorage() {
  localStorage.removeItem("data");
  listContainer.innerHTML = "";
}

// Function to delete a task
function deleteTask(task) {
  task.remove();
  saveData();
  deleteTaskOnAPI(task.id); // Call the API to delete the task
}

// Function to create a task via a POST request to the API
function createTaskOnAPI(title) {
  fetch('https://jsonplaceholder.typicode.com/posts', {
    method: 'POST',
    body: JSON.stringify({
      title: title,
      body: 'bar',
      userId: 1,
    }),
    headers: {
      'Content-type': 'application/json; charset=UTF-8',
    },
  })
    .then((response) => response.json())
    .then((json) => console.log("Created task:", json))
    .catch((error) => console.error("Error creating task:", error));
}

// Function to delete a task via a DELETE request to the API
function deleteTaskOnAPI(taskId) {
  fetch(`https://jsonplaceholder.typicode.com/posts/${taskId}`, {
    method: 'DELETE',
  })
    .then((response) => {
      if (response.status === 200) {
        console.log("Deleted task with ID:", taskId);
      } else {
        console.error("Error deleting task with ID:", taskId);
      }
    })
    .catch((error) => console.error("Error deleting task:", error));
}

// Function to edit a task via a PUT request to the API
function edittaskapi(taskId, title) {
  fetch(`https://jsonplaceholder.typicode.com/posts/${taskId}`, {
    method: 'PUT',
    body: JSON.stringify({
      id: taskId,
      title: title,
      body: 'bar',
      userId: 1,
    }),
    headers: {
      'Content-type': 'application/json; charset=UTF-8',
    },
  })
    .then((response) => response.json())
    .then((json) => console.log("Edited task:", json))
    .catch((error) => console.error("Error editing task:", error));
}
